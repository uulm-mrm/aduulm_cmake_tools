if(_ADUULM_CMAKE_TOOLS_INCLUDED_)
    return()
endif()
set(_ADUULM_CMAKE_TOOLS_INCLUDED_ TRUE)

# Set the cmake install path
if(@DEVELSPACE@)
# cmake dir in develspace
list(APPEND CMAKE_MODULE_PATH "@PROJECT_SOURCE_DIR@/cmake/Modules")
else()
# cmake dir in installspace
list(APPEND CMAKE_MODULE_PATH "@PKG_CMAKE_DIR@/Modules")
endif()

# colour support
if (NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset "${Esc}[0m")
  set(ColourBold  "${Esc}[1m")
  set(ColourRed         "${Esc}[31m")
  set(ColourGreen       "${Esc}[32m")
  set(ColourYellow      "${Esc}[33m")
  set(ColourBlue        "${Esc}[34m")
  set(ColourMagenta     "${Esc}[35m")
  set(ColourCyan        "${Esc}[36m")
  set(ColourWhite       "${Esc}[37m")
  set(ColourBoldRed     "${Esc}[1;31m")
  set(ColourBoldGreen   "${Esc}[1;32m")
  set(ColourBoldYellow  "${Esc}[1;33m")
  set(ColourBoldBlue    "${Esc}[1;34m")
  set(ColourBoldMagenta "${Esc}[1;35m")
  set(ColourBoldCyan    "${Esc}[1;36m")
  set(ColourBoldWhite   "${Esc}[1;37m")

  set(ColourBuildInfo "${ColourBoldBlue}")
endif()

macro(find_aduulm_package _pkg_name_)
  set (_opt_arg0_ "")
  set (_opt_arg1_ REQUIRED)
  set (extra_macro_args ${ARGN})
  list(LENGTH extra_macro_args num_extra_args)
    if (${num_extra_args} GREATER 0)
      list(GET extra_macro_args 0 _opt_arg0_)
    endif ()
    if (${num_extra_args} GREATER 1)
      list(GET extra_macro_args 1 _opt_arg1_)
    endif ()
  if(IS_ROS)
    find_package(${_pkg_name_} ${_opt_arg0_} ${_opt_arg1_})
  else()
  endif()
endmacro()

macro(link_aduulm_package_targets)
  set(options "")
  set(oneValueArgs TARGET ACCESS)
  set(multiValueArgs PACKAGE_TARGETS)
  cmake_parse_arguments(link_aduulm_package_targets "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN} )

  set(target ${link_aduulm_package_targets_TARGET})
  set(access ${link_aduulm_package_targets_ACCESS})
  foreach(package_target ${link_aduulm_package_targets_PACKAGE_TARGETS})
    if(NOT TARGET ${package_target})
      if(${package_target}_INCLUDE_DIRS OR ${package_target}_LIBRARIES)
        # message("${package_target} is a package")
        # message("${${package_target}_INCLUDE_DIRS}")
        # message("${${package_target}_LIBRARIES}")
        if("${access}" STREQUAL "PUBLIC" OR "${access}" STREQUAL "")
          target_include_directories(${target} PUBLIC ${${package_target}_INCLUDE_DIRS})
          target_link_libraries(${target} PUBLIC ${${package_target}_LIBRARIES})
        elseif("${access}" STREQUAL "PRIVATE")
          target_include_directories(${target} PRIVATE ${${package_target}_INCLUDE_DIRS})
          target_link_libraries(${target} PRIVATE ${${package_target}_LIBRARIES})
        elseif("${access}" STREQUAL "INTERFACE")
          target_include_directories(${target} INTERFACE ${${package_target}_INCLUDE_DIRS})
          target_link_libraries(${target} INTERFACE ${${package_target}_LIBRARIES})
        else()
          message(FATAL_ERROR "Invalid value for 'ACCESS'!")
        endif()
      endif()
    else()
      # message("${package_target} is a target")
      if(NOT IS_ROS)
        if("${package_target}" MATCHES "::")
          string(REGEX REPLACE "::.*$" "" package_toplevel_target "${package_target}")
          add_dependencies(${target} ${package_toplevel_target})
        else()
          add_dependencies(${target} ${package_target})
        endif()
      endif()
      if("${access}" STREQUAL "PUBLIC" OR "${access}" STREQUAL "")
        target_link_libraries(${target} PUBLIC "${package_target}")
      elseif("${access}" STREQUAL "PRIVATE")
        target_link_libraries(${target} PRIVATE "${package_target}")
      elseif("${access}" STREQUAL "INTERFACE")
        target_link_libraries(${target} INTERFACE "${package_target}")
      else()
        message(FATAL_ERROR "Invalid value for 'ACCESS'!")
      endif()
    endif()
  endforeach(package_target)
endmacro()

macro(get_version_string_from_package_xml path)
  if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${path}/package.xml")
    message(WARNING "Could not extract version info from non-existing file: ${CMAKE_CURRENT_SOURCE_DIR}/${path}/package.xml")
    return()
  endif()

  execute_process(COMMAND sh -c "grep \"<name>\" package.xml | sed -e 's+ *<name>\\(.*\\)</name>+\\1+'"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${path}"
    OUTPUT_VARIABLE package_name
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )

  execute_process(COMMAND sh -c "grep \"<version>\" package.xml | sed -e 's+ *<version>\\(.*\\)</version>+\\1+'"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${path}"
    OUTPUT_VARIABLE package_version
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
endmacro()

macro(show_build_info msg)
if(IS_ADTF)
  message("${ColourBuildInfo}${package_name}(v. ${package_version})::${PROJECT_NAME} ${msg}${ColourReset}")
endif()
endmacro()

macro(setup_git_hooks)
  set(HOOKS_PATH "${CMAKE_BINARY_DIR}/../../root/git_hooks")
  if(EXISTS "${HOOKS_PATH}")
    add_subdirectory("${HOOKS_PATH}" "${CMAKE_CURRENT_BINARY_DIR}/.hooks")
  else()
    message(WARNING "Could not find git hooks. Git hooks are not active.")
  endif()
endmacro()
